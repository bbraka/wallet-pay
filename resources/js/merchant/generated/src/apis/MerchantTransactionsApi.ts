/* tslint:disable */
/* eslint-disable */
/**
 * User Wallet API
 * API for User Wallet application with order and transaction management
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetMerchantTransaction200Response,
  GetMerchantTransactions200Response,
} from '../models/index';
import {
    GetMerchantTransaction200ResponseFromJSON,
    GetMerchantTransaction200ResponseToJSON,
    GetMerchantTransactions200ResponseFromJSON,
    GetMerchantTransactions200ResponseToJSON,
} from '../models/index';

export interface GetMerchantTransactionRequest {
    transaction: number;
}

export interface GetMerchantTransactionsRequest {
    dateFrom?: Date;
    dateTo?: Date;
    status?: GetMerchantTransactionsStatusEnum;
    type?: GetMerchantTransactionsTypeEnum;
    minAmount?: number;
    maxAmount?: number;
}

/**
 * 
 */
export class MerchantTransactionsApi extends runtime.BaseAPI {

    /**
     * Get merchant transaction details
     */
    async getMerchantTransactionRaw(requestParameters: GetMerchantTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMerchantTransaction200Response>> {
        if (requestParameters['transaction'] == null) {
            throw new runtime.RequiredError(
                'transaction',
                'Required parameter "transaction" was null or undefined when calling getMerchantTransaction().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("sanctum", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/merchant/transactions/{transaction}`;
        urlPath = urlPath.replace(`{${"transaction"}}`, encodeURIComponent(String(requestParameters['transaction'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMerchantTransaction200ResponseFromJSON(jsonValue));
    }

    /**
     * Get merchant transaction details
     */
    async getMerchantTransaction(requestParameters: GetMerchantTransactionRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMerchantTransaction200Response> {
        const response = await this.getMerchantTransactionRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get merchant user transactions
     */
    async getMerchantTransactionsRaw(requestParameters: GetMerchantTransactionsRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetMerchantTransactions200Response>> {
        const queryParameters: any = {};

        if (requestParameters['dateFrom'] != null) {
            queryParameters['date_from'] = (requestParameters['dateFrom'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['dateTo'] != null) {
            queryParameters['date_to'] = (requestParameters['dateTo'] as any).toISOString().substring(0,10);
        }

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['type'] != null) {
            queryParameters['type'] = requestParameters['type'];
        }

        if (requestParameters['minAmount'] != null) {
            queryParameters['min_amount'] = requestParameters['minAmount'];
        }

        if (requestParameters['maxAmount'] != null) {
            queryParameters['max_amount'] = requestParameters['maxAmount'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("sanctum", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/api/merchant/transactions`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetMerchantTransactions200ResponseFromJSON(jsonValue));
    }

    /**
     * Get merchant user transactions
     */
    async getMerchantTransactions(requestParameters: GetMerchantTransactionsRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetMerchantTransactions200Response> {
        const response = await this.getMerchantTransactionsRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const GetMerchantTransactionsStatusEnum = {
    Active: 'active',
    Cancelled: 'cancelled'
} as const;
export type GetMerchantTransactionsStatusEnum = typeof GetMerchantTransactionsStatusEnum[keyof typeof GetMerchantTransactionsStatusEnum];
/**
 * @export
 */
export const GetMerchantTransactionsTypeEnum = {
    Credit: 'credit',
    Debit: 'debit'
} as const;
export type GetMerchantTransactionsTypeEnum = typeof GetMerchantTransactionsTypeEnum[keyof typeof GetMerchantTransactionsTypeEnum];
