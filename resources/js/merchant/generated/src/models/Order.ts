/* tslint:disable */
/* eslint-disable */
/**
 * User Wallet API
 * API for User Wallet application with order and transaction management
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: admin@example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * Order ID
     * @type {number}
     * @memberof Order
     */
    id?: number;
    /**
     * Order title
     * @type {string}
     * @memberof Order
     */
    title: string;
    /**
     * Order amount
     * @type {number}
     * @memberof Order
     */
    amount: number;
    /**
     * Order status
     * @type {string}
     * @memberof Order
     */
    status: OrderStatusEnum;
    /**
     * Order type
     * @type {string}
     * @memberof Order
     */
    orderType?: OrderOrderTypeEnum;
    /**
     * Order description
     * @type {string}
     * @memberof Order
     */
    description?: string | null;
    /**
     * ID of the user who owns this order
     * @type {number}
     * @memberof Order
     */
    userId: number;
    /**
     * Credit note number for refunded orders
     * @type {string}
     * @memberof Order
     */
    creditNoteNumber?: string | null;
    /**
     * Creation timestamp
     * @type {Date}
     * @memberof Order
     */
    createdAt?: Date;
    /**
     * Last update timestamp
     * @type {Date}
     * @memberof Order
     */
    updatedAt?: Date | null;
    /**
     * Soft delete timestamp
     * @type {Date}
     * @memberof Order
     */
    deletedAt?: Date | null;
    /**
     * Date when payment was completed
     * @type {Date}
     * @memberof Order
     */
    paymentCompletionDate?: Date | null;
}


/**
 * @export
 */
export const OrderStatusEnum = {
    PendingPayment: 'pending_payment',
    PendingApproval: 'pending_approval',
    Completed: 'completed',
    Cancelled: 'cancelled',
    Refunded: 'refunded'
} as const;
export type OrderStatusEnum = typeof OrderStatusEnum[keyof typeof OrderStatusEnum];

/**
 * @export
 */
export const OrderOrderTypeEnum = {
    InternalTransfer: 'internal_transfer',
    UserTopUp: 'user_top_up',
    AdminTopUp: 'admin_top_up',
    UserWithdrawal: 'user_withdrawal',
    AdminWithdrawal: 'admin_withdrawal'
} as const;
export type OrderOrderTypeEnum = typeof OrderOrderTypeEnum[keyof typeof OrderOrderTypeEnum];


/**
 * Check if a given object implements the Order interface.
 */
export function instanceOfOrder(value: object): value is Order {
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('amount' in value) || value['amount'] === undefined) return false;
    if (!('status' in value) || value['status'] === undefined) return false;
    if (!('userId' in value) || value['userId'] === undefined) return false;
    return true;
}

export function OrderFromJSON(json: any): Order {
    return OrderFromJSONTyped(json, false);
}

export function OrderFromJSONTyped(json: any, ignoreDiscriminator: boolean): Order {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'] == null ? undefined : json['id'],
        'title': json['title'],
        'amount': json['amount'],
        'status': json['status'],
        'orderType': json['order_type'] == null ? undefined : json['order_type'],
        'description': json['description'] == null ? undefined : json['description'],
        'userId': json['user_id'],
        'creditNoteNumber': json['credit_note_number'] == null ? undefined : json['credit_note_number'],
        'createdAt': json['created_at'] == null ? undefined : (new Date(json['created_at'])),
        'updatedAt': json['updated_at'] == null ? undefined : (new Date(json['updated_at'])),
        'deletedAt': json['deleted_at'] == null ? undefined : (new Date(json['deleted_at'])),
        'paymentCompletionDate': json['payment_completion_date'] == null ? undefined : (new Date(json['payment_completion_date'])),
    };
}

export function OrderToJSON(json: any): Order {
    return OrderToJSONTyped(json, false);
}

export function OrderToJSONTyped(value?: Order | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'title': value['title'],
        'amount': value['amount'],
        'status': value['status'],
        'order_type': value['orderType'],
        'description': value['description'],
        'user_id': value['userId'],
        'credit_note_number': value['creditNoteNumber'],
        'created_at': value['createdAt'] == null ? undefined : ((value['createdAt']).toISOString()),
        'updated_at': value['updatedAt'] === null ? null : ((value['updatedAt'] as any)?.toISOString()),
        'deleted_at': value['deletedAt'] === null ? null : ((value['deletedAt'] as any)?.toISOString()),
        'payment_completion_date': value['paymentCompletionDate'] === null ? null : ((value['paymentCompletionDate'] as any)?.toISOString()),
    };
}

